using System;
using System.Drawing;
using System.IO;
using System.Threading.Tasks;

using SphereStudio.Base;

namespace SphereStudio.Compilers
{
    class SphereCompiler : ICompiler
    {
        private readonly string[] fileFilters =
        {
            "*.rmp", "*.rss", "*.rts", "*.rfn", "*.rws",
            "*.js", "*.mjs", "*.glsl",
            "*.mp3", "*.ogg", "*.mid", "*.wav", "*.flac", "*.it", "*.s3m", "*.mod",
            "*.png", "*.jpg", "*.bmp", "*.pcx", "*.mng",
        };

        public bool Prep(IProject project, IConsole console)
        {
            console.Print("preparing Sphere Classic project... ");
            var scriptPath = Path.Combine(project.RootPath, "scripts", "main.js");
            Directory.CreateDirectory(Path.GetDirectoryName(scriptPath));
            var code = string.Join(Environment.NewLine,
                "// main.js automatically generated by Sphere Studio",
                "",
                "function game()",
                "{",
                "\t// your game code here",
                "\t",
                "}",
            "");
            File.WriteAllText(scriptPath, code);
            console.Print("OK.\n");

            console.Print("Success!\n");
            return true;
        }

        public async Task<string> Build(IProject project, bool debuggable, IConsole console)
        {
            console.Print($"Sphere Studio {Versioning.Version} Sphere manifest compiler\n");
            console.Print($"built-in IDE tooling for Sphere v1 and v2 games\n");
            console.Print($"(c) {Versioning.Copyright}\n");
            console.Print("\n");
            console.Print("writing Sphere game manifest 'game.sgm'... ");
            string sgmPath = Path.Combine(project.RootPath, "game.sgm");
            var apiVersion = project.Settings.GetInteger("apiVersion", 1);
            var apiLevel = project.Settings.GetInteger("apiLevel", 1);
            var mainPath = project.Settings.GetString("mainScript", "scripts/main.js");
            var resolution = project.Settings.GetSize("resolution", new Size(320, 240));
            var saveId = project.Settings.GetString("saveID", string.Empty);
            using (StreamWriter sw = new StreamWriter(sgmPath))
            {
                sw.WriteLine($"version={apiVersion}");
                if (apiVersion >= 2)
                    sw.WriteLine($"api={apiLevel}");
                sw.WriteLine($"name={project.Name}");
                sw.WriteLine($"author={project.Author}");
                sw.WriteLine($"description={project.Summary}");
                if (apiVersion >= 2)
                {
                    sw.WriteLine($"resolution={resolution.Width}x{resolution.Height}");
                    sw.WriteLine($"main={mainPath}");
                    if (saveId != string.Empty)
                        sw.WriteLine($"saveID={saveId}");
                }
                else
                {
                    var scriptPath = mainPath.StartsWith("scripts/")
                        ? mainPath.Substring(8)
                        : $"../{mainPath}";
                    sw.WriteLine($"screen_width={resolution.Width}");
                    sw.WriteLine($"screen_height={resolution.Height}");
                    sw.WriteLine($"script={scriptPath}");
                }
            }
            console.Print("OK.\n");

            console.Print("Sphere Classic build succeeded.\n");
            return project.RootPath;
        }
    }
}
